# Sample Vermin Configuration
#
# It contains all config options with default values commented out.
# The file is typically renamed as "vermin.ini" when copied into a project.

[vermin]
### Quiet mode ###
# If used together with --violations, quiet mode is preserved while showing only violations: no
# descriptive text, tips, or verdicts.
#
#quiet = no

### Verbosity ###
# Verbosity level 1 to 4. -v, -vv, -vvv, and -vvvv shows increasingly more information. Turned off
# at level 0.
#
#verbose = 0

### Dump AST node visits ###
# Only for debugging.
#
#print_visits = no

### Matching target versions ###
# Target version that files must abide by. Can be specified once or twice.
# A '-' can be appended to match target version or smaller, like '3.5-'.
# If not met Vermin will exit with code 1.
# Note that the amount of target versions must match the amount of minimum required versions
# detected.
#
# Examples:
#targets = 2.6-
#targets = 2.3
#  3,4
#targets = 2,7
#  3,9-

### Concurrent processing ###
# Use N concurrent processes to detect and analyze files. Defaults to 0, meaning all cores
# available.
#
#processes = 0

### Ignore incompatible versions and warnings ###
# However, if no compatible versions are found then incompatible versions will be shown in the end
# to not have an absence of results.
#
#ignore_incomp = no

### Hidden analysis ###
# Analyze 'hidden' files and folders starting with '.' (ignored by default when not specified
# directly).
#
#analyze_hidden = no

### Tips ###
# Possibly show helpful tips at the end, like those relating to backports or usage of unevaluated
# generic/literal annotations.
#
#show_tips = yes

### Pessimistic mode ###
# Syntax errors are interpreted as the major Python version in use being incompatible.
#
#pessimistic = no

### Exclusions ###
# Exclude full names, like 'email.parser.FeedParser', from analysis. Useful to ignore conditional
# logic that can trigger incompatible results.
#
# Exclude 'foo.bar.baz' module/member: foo.bar.baz
# Exclude 'foo' kwarg:                 somemodule.func(foo)
# Exclude 'bar' codecs error handler:  ceh=bar
# Exclude 'baz' codecs encoding:       ce=baz
#
# Example exclusions:
#exclusions =
#  email.parser.FeedParser
#  argparse.ArgumentParser(allow_abbrev)
#
#
# Exclude specific file paths from being crawled by matching against a regular expression. Useful to
# ignore files that are not executed under the same python interpreter, such as .pyi files.
#
# Exclude any '.pyi' file:                \.pyi$
#
# (Note: the below examples require `make_paths_absolute = no`, or prefixing the patterns with the
# regex-escaped path to the current directory.)
#
# Exclude the directory 'a/b/':           ^a/b$
# Exclude '.pyi' files under 'a/b/':      ^a/b/.+\.pyi$
# Exclude '.pyi' files in exactly 'a/b/': ^a/b/[^/]+\.pyi$
#
# Example regex exclusions:
#exclusion_regex =
#  \.pyi$

### Absolute Path Resolution
# Convert any relative paths from the command line into absolute paths. This affects the path
# printed to the terminal if a file fails a check, and and requires exclusion_regex patterns to
# match absolute paths.
#
#make_paths_absolute = yes

### Backports ###
# Some features are sometimes backported into packages, in repositories such as PyPi, that are
# widely used but aren't in the standard language. If such a backport is specified as being used,
# the results will reflect that instead.
#
# Get full list via `--help`.
#
# Example backports:
#backports =
#  typing
#  argparse

### Features ###
# Some features are disabled by default due to being unstable but can be enabled explicitly.
#
# Get full list via `--help`.
#
# Example features:
#features =
#  fstring-self-doc

### Format ###
# Format to show results and output in.
#
# Get full list via `--help`.
#
#format = default

### Annotations evaluation ###
# Instructs parser that annotations will be manually evaluated in code, which changes minimum
# versions in certain cases. Otherwise, function and variable annotations are not evaluated at
# definition time. Apply this argument if code uses `typing.get_type_hints` or
# `eval(obj.__annotations__)` or otherwise forces evaluation of annotations.
#
#eval_annotations = no

### Violations ###
# Show only results that violate versions described by targets, which are required to be
# specified. Verbosity mode is automatically set to at least 2 in order to show violations in output
# text, but can be increased if necessary.
#
# If no rules are triggered while used in conjunction with targets, an exit code 0 will still be
# yielded due to inconclusivity.
#
# Can be used together with quiet mode such that only the violations are shown: no descriptive text,
# tips, or verdicts.
#
#only_show_violations = no

### Parse comments ###
# Whether or not to parse comments, searching for "# novm" and "# novermin" to exclude anslysis of
# specific lines. If these comments aren't used in a particular code base, not parsing them can
# sometimes yield a speedup of 30-40%+.
#
#parse_comments = yes

### Scan symlink folders ###
# Scan symlinks to folders to include in analysis. Symlinks to non-folders or top-level folders will
# always be scanned.
#
#scan_symlink_folders = no
